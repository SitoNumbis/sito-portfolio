{"version":3,"file":"static/js/796.37969e9d.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","config.js","layouts/Contact/Contact.jsx"],"sourcesContent":["import { forwardRef } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @emotion/css\r\nimport { css } from \"@emotion/css\";\r\n\r\nconst Section = forwardRef((props, ref) => {\r\n  const { id, background, children } = props;\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      id={id}\r\n      className={css({\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        padding: \"100px 0\",\r\n        minHeight: \"100vh\",\r\n        background,\r\n        position: \"relative\",\r\n      })}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nSection.defaultProps = {\r\n  id: \"\",\r\n  children: <></>,\r\n  background: \"\",\r\n};\r\n\r\nSection.propTypes = {\r\n  id: PropTypes.string,\r\n  children: PropTypes.node,\r\n  background: PropTypes.string,\r\n};\r\n\r\nexport default Section;\r\n","const {\r\n  REACT_APP_EMAILJS_SERVICE_ID,\r\n  REACT_APP_EMAILJS_TEMPLATE_ID,\r\n  REACT_APP_EMAILJS_PUBLIC_KEY,\r\n} = process.env;\r\n\r\nconst config = {\r\n  serviceId: REACT_APP_EMAILJS_SERVICE_ID,\r\n  templateId: REACT_APP_EMAILJS_TEMPLATE_ID,\r\n  publicKey: REACT_APP_EMAILJS_PUBLIC_KEY,\r\n};\r\n\r\nexport default config;\r\n","import React, { useRef } from \"react\";\r\nimport emailjs from \"@emailjs/browser\";\r\n\r\n// @emotion/css\r\nimport { css } from \"@emotion/css\";\r\n\r\n// @nextui-org\r\nimport {\r\n  Input,\r\n  Textarea,\r\n  Button,\r\n  Text,\r\n  Image,\r\n  Container,\r\n} from \"@nextui-org/react\";\r\n\r\n// own components\r\nimport InViewComponent from \"../../components/InViewComponent/InViewComponent\";\r\nimport Section from \"../../components/Section/Section\";\r\n\r\n// contexts\r\nimport { useLanguage } from \"../../contexts/LanguageProvider\";\r\n\r\n// utils\r\nimport { parseDelay } from \"../../utils/functions\";\r\n\r\n// images\r\nimport contact from \"../../assets/images/contact.jpg\";\r\n\r\n// config\r\nimport config from \"../../config\";\r\n\r\nconst Hero = () => {\r\n  const form = useRef();\r\n  const { languageState } = useLanguage();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    emailjs\r\n      .sendForm(\r\n        config.serviceId,\r\n        config.templateId,\r\n        form.current,\r\n        config.publicKey\r\n      )\r\n      .then(\r\n        (result) => {\r\n          console.log(result.text);\r\n        },\r\n        (error) => {\r\n          console.log(error.text);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Section id=\"contact\" background=\"#222\">\r\n      <Container\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        display=\"flex\"\r\n        direction=\"column\"\r\n        css={{\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <InViewComponent>\r\n          <Text h1>{languageState.texts.Contact.Title}</Text>\r\n        </InViewComponent>\r\n        <form ref={form} onSubmit={onSubmit}>\r\n          <div\r\n            className={css({\r\n              display: \"grid\",\r\n              width: \"100%\",\r\n              gap: \"20px\",\r\n              marginTop: \"40px\",\r\n              gridTemplateColumns: \"1fr 1fr\",\r\n              \"@media (max-width: 549px)\": {\r\n                gridTemplateColumns: \"1fr\",\r\n              },\r\n            })}\r\n          >\r\n            <InViewComponent delay=\"0.5s\">\r\n              <Image\r\n                src={contact}\r\n                alt=\"contact\"\r\n                css={{\r\n                  width: \"100%\",\r\n                  height: \"385px\",\r\n                  objectFit: \"cover\",\r\n                  background: \"white\",\r\n                  marginRight: \"100px\",\r\n                  borderRadius: \"1rem\",\r\n                }}\r\n              />\r\n            </InViewComponent>\r\n            <div\r\n              className={css({\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                flexDirection: \"column\",\r\n                flexWrap: \"wrap\",\r\n              })}\r\n            >\r\n              {Object.values(languageState.texts.Contact.Inputs).map(\r\n                (item, i) => (\r\n                  <InViewComponent\r\n                    key={item.Label}\r\n                    delay={`${parseDelay(i, 0.6)}s`}\r\n                  >\r\n                    {item.Type !== \"textarea\" && (\r\n                      <Input\r\n                        required\r\n                        name={item.Name}\r\n                        label={item.Label}\r\n                        placeholder={item.Placeholder}\r\n                        css={{ width: \"100%\", marginBottom: \"20px\" }}\r\n                      />\r\n                    )}\r\n                    {item.Type === \"textarea\" && (\r\n                      <Textarea\r\n                        rows={5}\r\n                        required\r\n                        name={item.Name}\r\n                        label={item.Label}\r\n                        placeholder={item.Placeholder}\r\n                        css={{ width: \"100%\", marginBottom: \"20px\" }}\r\n                      />\r\n                    )}\r\n                  </InViewComponent>\r\n                )\r\n              )}\r\n              <InViewComponent delay=\"0.9s\">\r\n                <div\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"flex-end\",\r\n                  }}\r\n                >\r\n                  <Button rounded flat type=\"submit\">\r\n                    {languageState.texts.Contact.Button}\r\n                  </Button>\r\n                </div>\r\n              </InViewComponent>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </Container>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n"],"names":["Section","forwardRef","props","ref","id","background","children","className","css","display","justifyContent","alignItems","padding","minHeight","position","defaultProps","process","serviceId","REACT_APP_EMAILJS_SERVICE_ID","templateId","REACT_APP_EMAILJS_TEMPLATE_ID","publicKey","REACT_APP_EMAILJS_PUBLIC_KEY","form","useRef","languageState","useLanguage","justify","direction","height","InViewComponent","h1","texts","Contact","Title","onSubmit","e","preventDefault","emailjs","config","current","then","result","console","log","text","error","width","gap","marginTop","gridTemplateColumns","delay","src","contact","alt","objectFit","marginRight","borderRadius","flexDirection","flexWrap","Object","values","Inputs","map","item","i","parseDelay","Type","required","name","Name","label","Label","placeholder","Placeholder","marginBottom","rows","sx","rounded","flat","type","Button"],"sourceRoot":""}