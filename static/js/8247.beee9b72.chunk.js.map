{"version":3,"file":"static/js/8247.beee9b72.chunk.js","mappings":"kTAqBMA,GAAYC,EAAAA,EAAAA,KAAS,kBAAM,8BAAN,IACrBC,GAAOD,EAAAA,EAAAA,KAAS,kBAAM,8BAAN,IAChBE,GAAOF,EAAAA,EAAAA,KAAS,kBAAM,iEAAN,IAGhBG,GAAkBH,EAAAA,EAAAA,KAAS,kBAC/B,8BAD+B,IAG3BI,GAAUJ,EAAAA,EAAAA,KAAS,kBAAM,8BAAN,IACnBK,GAAgBL,EAAAA,EAAAA,KAAS,kBAAM,uDAAN,IACzBM,GAAON,EAAAA,EAAAA,KAAS,kBAAM,8BAAN,IAEhBO,EAAW,WACf,IAAQC,GAAkBC,EAAAA,EAAAA,KAAlBD,cAER,OACE,SAAC,EAAAE,SAAD,WACE,SAACN,EAAD,CAASO,GAAG,WAAWC,WAAW,OAAlC,UACE,UAACb,EAAD,CACEc,QAAQ,SACRC,WAAW,SACXC,QAAQ,OACRC,UAAU,SACVC,IAAK,CACHC,OAAQ,OACRC,MAAO,OACPC,IAAK,CACHC,eAAgB,SAChBP,WAAY,SACZC,QAAS,OACTO,cAAe,WAZrB,WAgBE,SAACjB,EAAD,KACA,SAACF,EAAD,WACE,SAACF,EAAD,CAAMsB,IAAE,EAACC,WAAWP,EAAAA,EAAAA,IAAI,CAAEQ,UAAW,WAArC,SACGjB,EAAckB,MAAMnB,SAASoB,WAGlC,SAACxB,EAAD,CAAiByB,MAAM,OAAvB,UACE,UAAC3B,EAAD,CAAMgB,IAAK,CAAEQ,UAAW,UAAxB,UACGjB,EAAckB,MAAMnB,SAASN,MAC9B,UAACC,EAAD,CACE2B,KAAMrB,EAAckB,MAAMI,MAAMC,OAAO7B,KACvC8B,IAAI,aACJC,OAAO,SACPhB,IAAK,CAAEiB,OAAQ,QAJjB,UAMG1B,EAAckB,MAAMnB,SAAS4B,SAC9B,SAAC,IAAD,CACEC,KAAMC,EAAAA,IACNb,WAAWP,EAAAA,EAAAA,IAAI,CAAEqB,WAAY,MAAOC,SAAU,oBAKtD,SAACxC,EAAD,CACEc,QAAQ,SACRE,QAAQ,OACRyB,KAAK,OACLvB,IAAK,CACHwB,UAAW,OACXnB,cAAe,iBACfF,IAAK,CACHL,QAAS,OACTO,cAAe,QATrB,SAaGd,EAAckB,MAAMnB,SAASA,SAASmC,KAAI,SAACC,EAAMC,GAAP,OACzC,SAACzC,EAAD,CAEEyB,MAAK,WAAKiB,EAAAA,EAAAA,GAAWD,EAAG,IAAnB,KAFP,UAIE,SAACtC,EAAD,CACEwC,KAAMH,EAAKzC,KACX6C,MAAOJ,EAAKK,OAASC,EACrBC,IAAG,UAAKP,EAAKhB,MAAV,SACHwB,KAAMR,EAAKhB,MACXyB,KAAMT,EAAK1C,QARR0C,EAAKhB,MAF6B,YAmBtD,EAID,GAFqB0B,EAAAA,EAAAA,OAAK,SAACC,GAAD,OAAW,SAAC/C,GAAD,UAAc+C,GAAzB,G,8EC1GnB,IAAMC,EAAW,WAAiB,IAAhBtB,EAAe,uDAAN,EAC5BuB,EAAc,EAClB,GAAsB,kBAAXvB,EAAqB,CAC9B,IAAMwB,EAAUC,SAASC,eAAe1B,GACxB,OAAZwB,IAAkBD,EAAcC,EAAQG,UAAY,IACzD,CACDC,OAAOC,OAAO,CACZC,IAAKP,EAAc,IAAMA,EAAcvB,EACvC+B,KAAM,EACNC,SAAU,UAEb,EAQYpB,EAAa,SAACD,EAAGhB,GAE5B,IADA,IAAIsC,EAAWtC,EACNuC,EAAI,EAAGA,EAAIvB,EAAGuB,GAAK,EAAGD,GAAY,GAC3C,OAAOA,CACR,C","sources":["layouts/Projects/Projects.jsx","utils/functions.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { Suspense, memo } from \"react\";\r\nimport loadable from \"@loadable/component\";\r\n\r\n// @emotion/css\r\nimport { css } from \"@emotion/css\";\r\n\r\n// @fortawesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExternalLink } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// contexts\r\nimport { useLanguage } from \"../../contexts/LanguageProvider\";\r\n\r\n// utils\r\nimport { parseDelay } from \"../../utils/functions\";\r\n\r\n// image\r\nimport logistics from \"../../assets/images/projects/wmt.jpg\";\r\n\r\n// @nextui-org\r\nconst Container = loadable(() => import(\"../../components/NextUI/Container\"));\r\nconst Text = loadable(() => import(\"../../components/NextUI/Text\"));\r\nconst Link = loadable(() => import(\"../../components/NextUI/Link\"));\r\n\r\n// own components\r\nconst InViewComponent = loadable(() =>\r\n  import(\"../../components/InViewComponent/InViewComponent\")\r\n);\r\nconst Section = loadable(() => import(\"../../components/Section/Section\"));\r\nconst FloatingIcons = loadable(() => import(\"./components/FloatingIcons\"));\r\nconst Card = loadable(() => import(\"../../components/Card/Card\"));\r\n\r\nconst Projects = () => {\r\n  const { languageState } = useLanguage();\r\n\r\n  return (\r\n    <Suspense>\r\n      <Section id=\"projects\" background=\"#222\">\r\n        <Container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          display=\"flex\"\r\n          direction=\"column\"\r\n          css={{\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            div: {\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n            },\r\n          }}\r\n        >\r\n          <FloatingIcons />\r\n          <InViewComponent>\r\n            <Text h2 className={css({ textAlign: \"center\" })}>\r\n              {languageState.texts.Projects.Title}\r\n            </Text>\r\n          </InViewComponent>\r\n          <InViewComponent delay=\"0.4s\">\r\n            <Text css={{ textAlign: \"center\" }}>\r\n              {languageState.texts.Projects.Text}\r\n              <Link\r\n                href={languageState.texts.About.Github.Link}\r\n                rel=\"noreferrer\"\r\n                target=\"_blank\"\r\n                css={{ margin: \"auto\" }}\r\n              >\r\n                {languageState.texts.Projects.SeeMore}\r\n                <FontAwesomeIcon\r\n                  icon={faExternalLink}\r\n                  className={css({ marginLeft: \"5px\", fontSize: \"18px\" })}\r\n                />\r\n              </Link>\r\n            </Text>\r\n          </InViewComponent>\r\n          <Container\r\n            justify=\"center\"\r\n            display=\"flex\"\r\n            wrap=\"wrap\"\r\n            css={{\r\n              marginTop: \"10px\",\r\n              flexDirection: \"row !important\",\r\n              div: {\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n              },\r\n            }}\r\n          >\r\n            {languageState.texts.Projects.Projects.map((item, i) => (\r\n              <InViewComponent\r\n                key={item.Title}\r\n                delay={`${parseDelay(i, 0.4)}s`}\r\n              >\r\n                <Card\r\n                  link={item.Link}\r\n                  image={item.Image || logistics}\r\n                  alt={`${item.Title}-logo`}\r\n                  text={item.Title}\r\n                  more={item.Text}\r\n                />\r\n              </InViewComponent>\r\n            ))}\r\n          </Container>\r\n        </Container>\r\n      </Section>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst ProjectsMemo = memo((props) => <Projects {...props} />);\r\n\r\nexport default ProjectsMemo;\r\n","// @ts-check\n\n/**\n * Scroll to a target position, default the top of the page.\n * @param {number} [target=0] - The target position to scroll to. If a string is passed it looks for respective element with target id\n */\nexport const scrollTo = (target = 0) => {\n  let localTarget = 0;\n  if (typeof target === \"string\") {\n    const element = document.getElementById(target);\n    if (element !== null) localTarget = element.offsetTop - 100;\n  }\n  window.scroll({\n    top: localTarget > 100 ? localTarget : target,\n    left: 0,\n    behavior: \"smooth\",\n  });\n};\n\n/**\n *\n * @param {number} i\n * @param {number} delay\n * @returns\n */\nexport const parseDelay = (i, delay) => {\n  let newDelay = delay;\n  for (let j = 0; j < i; j += 1) newDelay += 0.1;\n  return newDelay;\n};\n"],"names":["Container","loadable","Text","Link","InViewComponent","Section","FloatingIcons","Card","Projects","languageState","useLanguage","Suspense","id","background","justify","alignItems","display","direction","css","height","width","div","justifyContent","flexDirection","h2","className","textAlign","texts","Title","delay","href","About","Github","rel","target","margin","SeeMore","icon","faExternalLink","marginLeft","fontSize","wrap","marginTop","map","item","i","parseDelay","link","image","Image","logistics","alt","text","more","memo","props","scrollTo","localTarget","element","document","getElementById","offsetTop","window","scroll","top","left","behavior","newDelay","j"],"sourceRoot":""}