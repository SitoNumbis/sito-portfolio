{"version":3,"file":"static/js/4871.e4270675.chunk.js","mappings":"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","sources":["../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useLayoutEffect.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useId.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/chain.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/mergeProps.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/filterDOMProps.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/focusWithoutScrolling.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/runAfterTransition.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useViewportSize.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useDescription.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/platform.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/textSelection.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/utils.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/context.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useSyncRef.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/node_modules/@react-aria/utils/dist/packages/@react-aria/utils/src/useGlobalListeners.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusVisible.ts","../node_modules/@nextui-org/react/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useHover.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React from 'react';\n\n// During SSR, React emits a warning when calling useLayoutEffect.\n// Since neither useLayoutEffect nor useEffect run on the server,\n// we can suppress this by replace it with a noop on the server.\nexport const useLayoutEffect = typeof window !== 'undefined'\n  ? React.useLayoutEffect\n  : () => {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLayoutEffect} from './useLayoutEffect';\nimport {useSSRSafeId} from '@react-aria/ssr';\nimport {useValueEffect} from './';\n\nlet idsUpdaterMap: Map<string, (v: string) => void> = new Map();\n\n/**\n * If a default is not provided, generate an id.\n * @param defaultId - Default component id.\n */\nexport function useId(defaultId?: string): string {\n  let [value, setValue] = useState(defaultId);\n  let nextId = useRef(null);\n\n  let res = useSSRSafeId(value);\n\n  let updateValue = useCallback((val) => {\n    nextId.current = val;\n  }, []);\n\n  idsUpdaterMap.set(res, updateValue);\n\n  useLayoutEffect(() => {\n    let r = res;\n    return () => {\n      idsUpdaterMap.delete(r);\n    };\n  }, [res]);\n\n  // This cannot cause an infinite loop because the ref is updated first.\n  // eslint-disable-next-line\n  useEffect(() => {\n    let newId = nextId.current;\n    if (newId) {\n      nextId.current = null;\n      setValue(newId);\n    }\n  });\n\n  return res;\n}\n\n/**\n * Merges two ids.\n * Different ids will trigger a side-effect and re-render components hooked up with `useId`.\n */\nexport function mergeIds(idA: string, idB: string): string {\n  if (idA === idB) {\n    return idA;\n  }\n\n  let setIdA = idsUpdaterMap.get(idA);\n  if (setIdA) {\n    setIdA(idB);\n    return idB;\n  }\n\n  let setIdB = idsUpdaterMap.get(idB);\n  if (setIdB) {\n    setIdB(idA);\n    return idA;\n  }\n\n  return idB;\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as labelledby.\n * @param depArray - When to recalculate if the id is in the DOM.\n */\nexport function useSlotId(depArray: ReadonlyArray<any> = []): string {\n  let id = useId();\n  let [resolvedId, setResolvedId] = useValueEffect(id);\n  let updateId = useCallback(() => {\n    setResolvedId(function *() {\n      yield id;\n\n      yield document.getElementById(id) ? id : undefined;\n    });\n  }, [id, setResolvedId]);\n\n  useLayoutEffect(updateId, [id, updateId, ...depArray]);\n\n  return resolvedId;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * Calls all functions in the order they were chained with the same arguments.\n */\nexport function chain(...callbacks: any[]): (...args: any[]) => void {\n  return (...args: any[]) => {\n    for (let callback of callbacks) {\n      if (typeof callback === 'function') {\n        callback(...args);\n      }\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain} from './chain';\nimport clsx from 'clsx';\nimport {mergeIds} from './useId';\n\ninterface Props {\n  [key: string]: any\n}\n\n// taken from: https://stackoverflow.com/questions/51603250/typescript-3-parameter-list-intersection-type/51604379#51604379\ntype TupleTypes<T> = { [P in keyof T]: T[P] } extends { [key: number]: infer V } ? V : never;\n// eslint-disable-next-line no-undef, @typescript-eslint/no-unused-vars\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\n/**\n * Merges multiple props objects together. Event handlers are chained,\n * classNames are combined, and ids are deduplicated - different ids\n * will trigger a side-effect and re-render components hooked up with `useId`.\n * For all other props, the last prop object overrides all previous ones.\n * @param args - Multiple sets of props to merge together.\n */\nexport function mergeProps<T extends Props[]>(...args: T): UnionToIntersection<TupleTypes<T>> {\n  // Start with a base clone of the first argument. This is a lot faster than starting\n  // with an empty object and adding properties as we go.\n  let result: Props = {...args[0]};\n  for (let i = 1; i < args.length; i++) {\n    let props = args[i];\n    for (let key in props) {\n      let a = result[key];\n      let b = props[key];\n\n      // Chain events\n      if (\n        typeof a === 'function' &&\n        typeof b === 'function' &&\n        // This is a lot faster than a regex.\n        key[0] === 'o' &&\n        key[1] === 'n' &&\n        key.charCodeAt(2) >= /* 'A' */ 65 &&\n        key.charCodeAt(2) <= /* 'Z' */ 90\n      ) {\n        result[key] = chain(a, b);\n\n        // Merge classnames, sometimes classNames are empty string which eval to false, so we just need to do a type check\n      } else if (\n        (key === 'className' || key === 'UNSAFE_className') &&\n        typeof a === 'string' &&\n        typeof b === 'string'\n      ) {\n        result[key] = clsx(a, b);\n      } else if (key === 'id' && a && b) {\n        result.id = mergeIds(a, b);\n        // Override others\n      } else {\n        result[key] = b !== undefined ? b : a;\n      }\n    }\n  }\n\n  return result as UnionToIntersection<TupleTypes<T>>;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps} from '@react-types/shared';\n\nconst DOMPropNames = new Set([\n  'id'\n]);\n\nconst labelablePropNames = new Set([\n  'aria-label',\n  'aria-labelledby',\n  'aria-describedby',\n  'aria-details'\n]);\n\ninterface Options {\n  /**\n   * If labelling associated aria properties should be included in the filter.\n   */\n  labelable?: boolean,\n  /**\n   * A Set of other property names that should be included in the filter.\n   */\n  propNames?: Set<string>\n}\n\nconst propRe = /^(data-.*)$/;\n\n/**\n * Filters out all props that aren't valid DOM props or defined via override prop obj.\n * @param props - The component props to be filtered.\n * @param opts - Props to override.\n */\nexport function filterDOMProps(props: DOMProps & AriaLabelingProps, opts: Options = {}): DOMProps & AriaLabelingProps {\n  let {labelable, propNames} = opts;\n  let filteredProps = {};\n\n  for (const prop in props) {\n    if (\n      Object.prototype.hasOwnProperty.call(props, prop) && (\n        DOMPropNames.has(prop) ||\n        (labelable && labelablePropNames.has(prop)) ||\n        propNames?.has(prop) ||\n        propRe.test(prop)\n      )\n    ) {\n      filteredProps[prop] = props[prop];\n    }\n  }\n\n  return filteredProps;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\n\n// This is a polyfill for element.focus({preventScroll: true});\n// Currently necessary for Safari and old Edge:\n// https://caniuse.com/#feat=mdn-api_htmlelement_focus_preventscroll_option\n// See https://bugs.webkit.org/show_bug.cgi?id=178583\n//\n\n// Original licensing for the following methods can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/calvellido/focus-options-polyfill\n\ninterface ScrollableElement {\n  element: HTMLElement,\n  scrollTop: number,\n  scrollLeft: number\n}\n\nexport function focusWithoutScrolling(element: FocusableElement) {\n  if (supportsPreventScroll()) {\n    element.focus({preventScroll: true});\n  } else {\n    let scrollableElements = getScrollableElements(element);\n    element.focus();\n    restoreScrollPosition(scrollableElements);\n  }\n}\n\nlet supportsPreventScrollCached: boolean = null;\nfunction supportsPreventScroll() {\n  if (supportsPreventScrollCached == null) {\n    supportsPreventScrollCached = false;\n    try {\n      var focusElem = document.createElement('div');\n      focusElem.focus({\n        get preventScroll() {\n          supportsPreventScrollCached = true;\n          return true;\n        }\n      });\n    } catch (e) {\n      // Ignore\n    }\n  }\n\n  return supportsPreventScrollCached;\n}\n\nfunction getScrollableElements(element: FocusableElement): ScrollableElement[] {\n  var parent = element.parentNode;\n  var scrollableElements: ScrollableElement[] = [];\n  var rootScrollingElement = document.scrollingElement || document.documentElement;\n\n  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {\n    if (\n      parent.offsetHeight < parent.scrollHeight ||\n      parent.offsetWidth < parent.scrollWidth\n    ) {\n      scrollableElements.push({\n        element: parent,\n        scrollTop: parent.scrollTop,\n        scrollLeft: parent.scrollLeft\n      });\n    }\n    parent = parent.parentNode;\n  }\n\n  if (rootScrollingElement instanceof HTMLElement) {\n    scrollableElements.push({\n      element: rootScrollingElement,\n      scrollTop: rootScrollingElement.scrollTop,\n      scrollLeft: rootScrollingElement.scrollLeft\n    });\n  }\n\n  return scrollableElements;\n}\n\nfunction restoreScrollPosition(scrollableElements: ScrollableElement[]) {\n  for (let {element, scrollTop, scrollLeft} of scrollableElements) {\n    element.scrollTop = scrollTop;\n    element.scrollLeft = scrollLeft;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We store a global list of elements that are currently transitioning,\n// mapped to a set of CSS properties that are transitioning for that element.\n// This is necessary rather than a simple count of transitions because of browser\n// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather\n// than one or the other. So we need to track what's actually transitioning so that\n// we can ignore these duplicate events.\nlet transitionsByElement = new Map<EventTarget, Set<string>>();\n\n// A list of callbacks to call once there are no transitioning elements.\nlet transitionCallbacks = new Set<() => void>();\n\nfunction setupGlobalEvents() {\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  let onTransitionStart = (e: TransitionEvent) => {\n    // Add the transitioning property to the list for this element.\n    let transitions = transitionsByElement.get(e.target);\n    if (!transitions) {\n      transitions = new Set();\n      transitionsByElement.set(e.target, transitions);\n\n      // The transitioncancel event must be registered on the element itself, rather than as a global\n      // event. This enables us to handle when the node is deleted from the document while it is transitioning.\n      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.\n      e.target.addEventListener('transitioncancel', onTransitionEnd);\n    }\n\n    transitions.add(e.propertyName);\n  };\n\n  let onTransitionEnd = (e: TransitionEvent) => {\n    // Remove property from list of transitioning properties.\n    let properties = transitionsByElement.get(e.target);\n    if (!properties) {\n      return;\n    }\n\n    properties.delete(e.propertyName);\n\n    // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.\n    if (properties.size === 0) {\n      e.target.removeEventListener('transitioncancel', onTransitionEnd);\n      transitionsByElement.delete(e.target);\n    }\n\n    // If no transitioning elements, call all of the queued callbacks.\n    if (transitionsByElement.size === 0) {\n      for (let cb of transitionCallbacks) {\n        cb();\n      }\n\n      transitionCallbacks.clear();\n    }\n  };\n\n  document.body.addEventListener('transitionrun', onTransitionStart);\n  document.body.addEventListener('transitionend', onTransitionEnd);\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalEvents);\n  }\n}\n\nexport function runAfterTransition(fn: () => void) {\n  // Wait one frame to see if an animation starts, e.g. a transition on mount.\n  requestAnimationFrame(() => {\n    // If no transitions are running, call the function immediately.\n    // Otherwise, add it to a list of callbacks to run at the end of the animation.\n    if (transitionsByElement.size === 0) {\n      fn();\n    } else {\n      transitionCallbacks.add(fn);\n    }\n  });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useEffect, useState} from 'react';\n\ninterface ViewportSize {\n  width: number,\n  height: number\n}\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nexport function useViewportSize(): ViewportSize {\n  let [size, setSize] = useState(() => getViewportSize());\n\n  useEffect(() => {\n    // Use visualViewport api to track available height even on iOS virtual keyboard opening\n    let onResize = () => {\n      setSize(size => {\n        let newSize = getViewportSize();\n        if (newSize.width === size.width && newSize.height === size.height) {\n          return size;\n        }\n        return newSize;\n      });\n    };\n\n    if (!visualViewport) {\n      window.addEventListener('resize', onResize);\n    } else {\n      visualViewport.addEventListener('resize', onResize);\n    }\n\n    return () => {\n      if (!visualViewport) {\n        window.removeEventListener('resize', onResize);\n      } else {\n        visualViewport.removeEventListener('resize', onResize);\n      }\n    };\n  }, []);\n\n  return size;\n}\n\nfunction getViewportSize(): ViewportSize {\n  return {\n    width: visualViewport?.width || window.innerWidth,\n    height: visualViewport?.height || window.innerHeight\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps} from '@react-types/shared';\nimport {useLayoutEffect} from './useLayoutEffect';\nimport {useState} from 'react';\n\nlet descriptionId = 0;\nconst descriptionNodes = new Map<string, {refCount: number, element: Element}>();\n\nexport function useDescription(description: string): AriaLabelingProps {\n  let [id, setId] = useState(undefined);\n\n  useLayoutEffect(() => {\n    if (!description) {\n      return;\n    }\n\n    let desc = descriptionNodes.get(description);\n    if (!desc) {\n      let id = `react-aria-description-${descriptionId++}`;\n      setId(id);\n\n      let node = document.createElement('div');\n      node.id = id;\n      node.style.display = 'none';\n      node.textContent = description;\n      document.body.appendChild(node);\n      desc = {refCount: 0, element: node};\n      descriptionNodes.set(description, desc);\n    } else {\n      setId(desc.element.id);\n    }\n\n    desc.refCount++;\n    return () => {\n      if (--desc.refCount === 0) {\n        desc.element.remove();\n        descriptionNodes.delete(description);\n      }\n    };\n  }, [description]);\n\n  return {\n    'aria-describedby': description ? id : undefined\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction testUserAgent(re: RegExp) {\n  if (typeof window === 'undefined' || window.navigator == null) {\n    return false;\n  }\n  return (\n    window.navigator['userAgentData']?.brands.some((brand: {brand: string, version: string}) => re.test(brand.brand))\n  ) ||\n  re.test(window.navigator.userAgent);\n}\n\nfunction testPlatform(re: RegExp) {\n  return typeof window !== 'undefined' && window.navigator != null\n    ? re.test(window.navigator['userAgentData']?.platform || window.navigator.platform)\n    : false;\n}\n\nexport function isMac() {\n  return testPlatform(/^Mac/i);\n}\n\nexport function isIPhone() {\n  return testPlatform(/^iPhone/i);\n}\n\nexport function isIPad() {\n  return testPlatform(/^iPad/i) ||\n    // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    (isMac() && navigator.maxTouchPoints > 1);\n}\n\nexport function isIOS() {\n  return isIPhone() || isIPad();\n}\n\nexport function isAppleDevice() {\n  return isMac() || isIOS();\n}\n\nexport function isWebKit() {\n  return testUserAgent(/AppleWebKit/i) && !isChrome();\n}\n\nexport function isChrome() {\n  return testUserAgent(/Chrome/i);\n}\n\nexport function isAndroid() {\n  return testUserAgent(/Android/i);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nexport function isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !(event as PointerEvent).pointerType;\n}\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {isVirtualClick} from './utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && (state.target.contains(target) && isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: HTMLElement): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const {key, code, target} = event;\n  const element = target as HTMLElement;\n  const {tagName, isContentEditable} = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    (tagName !== 'INPUT' &&\n      tagName !== 'TEXTAREA' &&\n      isContentEditable !== true) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && (target as HTMLButtonElement | HTMLInputElement).type === 'submit');\n}\n\nfunction isVirtualPointerEvent(event: PointerEvent) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return (\n    (event.width === 0 && event.height === 0) ||\n    (event.width === 1 &&\n      event.height === 1 &&\n      event.pressure === 0 &&\n      event.detail === 0 &&\n      event.pointerType === 'mouse'\n    )\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {MutableRefObject, RefObject} from 'react';\nimport {useLayoutEffect} from './';\n\ninterface ContextValue<T> {\n  ref?: MutableRefObject<T>\n}\n\n// Syncs ref from context with ref passed to hook\nexport function useSyncRef<T>(context: ContextValue<T>, ref: RefObject<T>) {\n  useLayoutEffect(() => {\n    if (context && context.ref && ref) {\n      context.ref.current = ref.current;\n      return () => {\n        context.ref.current = null;\n      };\n    }\n  }, [context, ref]);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef} from 'react';\n\ninterface GlobalListeners {\n  addGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void,\n  addGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void,\n  removeGlobalListener<K extends keyof DocumentEventMap>(el: EventTarget, type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void,\n  removeGlobalListener(el: EventTarget, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void,\n  removeAllGlobalListeners(): void\n}\n\nexport function useGlobalListeners(): GlobalListeners {\n  let globalListeners = useRef(new Map());\n  let addGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    // Make sure we remove the listener after it is called with the `once` option.\n    let fn = options?.once ? (...args) => {\n      globalListeners.current.delete(listener);\n      listener(...args);\n    } : listener;\n    globalListeners.current.set(listener, {type, eventTarget, fn, options});\n    eventTarget.addEventListener(type, listener, options);\n  }, []);\n  let removeGlobalListener = useCallback((eventTarget, type, listener, options) => {\n    let fn = globalListeners.current.get(listener)?.fn || listener;\n    eventTarget.removeEventListener(type, fn, options);\n    globalListeners.current.delete(listener);\n  }, []);\n  let removeAllGlobalListeners = useCallback(() => {\n    globalListeners.current.forEach((value, key) => {\n      removeGlobalListener(value.eventTarget, value.type, key, value.options);\n    });\n  }, [removeGlobalListener]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return removeAllGlobalListeners;\n  }, [removeAllGlobalListeners]);\n\n  return {addGlobalListener, removeGlobalListener, removeAllGlobalListeners};\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac} from '@react-aria/utils';\nimport {isVirtualClick} from './utils';\nimport {useEffect, useState} from 'react';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n"],"names":["$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c","window","$12uGp$react","$bdb11010cef70236$var$idsUpdaterMap","Map","$bdb11010cef70236$export$cd8c9cb68f842629","idA","idB","setIdA","get","setIdB","$ff5963eb1fccf552$export$e08e3b67e392101e","callbacks","callback","$3ef42575df84b30b$export$9d1611c77c2fe928","result","i","length","props","key","a","b","charCodeAt","id","undefined","$12uGp$clsx","Set","$7215afc6de606d6b$export$de79e2c695e052f3","element","$7215afc6de606d6b$var$supportsPreventScrollCached","document","createElement","focus","preventScroll","e","$7215afc6de606d6b$var$supportsPreventScroll","scrollableElements","parent","parentNode","rootScrollingElement","scrollingElement","documentElement","HTMLElement","offsetHeight","scrollHeight","offsetWidth","scrollWidth","push","scrollTop","scrollLeft","$7215afc6de606d6b$var$getScrollableElements","$7215afc6de606d6b$var$restoreScrollPosition","$bbed8b41f857bcc0$var$transitionsByElement","$bbed8b41f857bcc0$var$transitionCallbacks","$bbed8b41f857bcc0$var$setupGlobalEvents","onTransitionEnd","properties","target","delete","propertyName","size","removeEventListener","cb","clear","body","addEventListener","transitions","set","add","readyState","visualViewport","$c87311424ea30a05$var$testPlatform","re","ref","navigator","test","platform","$c87311424ea30a05$export$9ac100e40613ea10","$c87311424ea30a05$export$fedb369cb70207f1","maxTouchPoints","$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","$bx7SL$isIOS","style","webkitUserSelect","SVGElement","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","fn","requestAnimationFrame","has","targetOldUserSelect","getAttribute","removeAttribute","$8a9cb279dc87e130$export$60278871457622de","event","mozInputSource","isTrusted","detail","pointerType","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","$f6c31cce2adf654f$var$usePressResponderContext","context","$bx7SL$useContext","register","$bx7SL$mergeProps","current","$bx7SL$useSyncRef","$f6c31cce2adf654f$export$45712eceda6fad21","onPress1","onPress","onPressChange1","onPressChange","onPressStart1","onPressStart","onPressEnd1","onPressEnd","onPressUp1","onPressUp","isDisabled1","isDisabled","isPressedProp","isPressed","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","domProps","propsRef","$bx7SL$useRef","$bx7SL$useState","setPressed","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","globalListeners","$12uGp$useRef","addGlobalListener","$12uGp$useCallback","eventTarget","type","listener","options","once","removeGlobalListener","removeAllGlobalListeners","forEach","value","$12uGp$useEffect","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","state","triggerPressStart","originalEvent","currentTarget","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","$f6c31cce2adf654f$var$createEvent","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","preventDefault","stopPropagation","repeat","onKeyUp","onClick","button","$bx7SL$focusWithoutScrolling","$f6c31cce2adf654f$var$isHTMLAnchorLink","click","PointerEvent","onPointerDown","width","height","pressure","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","targetTouches","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","code","isContentEditable","role","changedTouches","point","rect","getBoundingClientRect","pointRect","offsetX","radiusX","offsetY","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$getPointClientRect","draggable","displayName","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$handleKeyboardEvent","$bx7SL$isMac","$507fabe10e71c6fb$var$isValidKey","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","prototype","apply","this","arguments","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","triggerHoverStart","triggerHoverEnd","hoverProps","onPointerEnter","onPointerLeave","hoverProps1","triggerHoverEnd1"],"sourceRoot":""}