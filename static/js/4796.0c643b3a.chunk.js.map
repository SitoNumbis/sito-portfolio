{"version":3,"file":"static/js/4796.0c643b3a.chunk.js","mappings":"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","sources":["components/InViewComponent/InViewComponent.jsx","components/Section/Section.jsx","config.js","layouts/Contact/Contact.jsx","utils/functions.js"],"sourcesContent":["import React, { useRef } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\n// @emotion/css\nimport { css } from \"@emotion/css\";\n\n// framer-motion\nimport { useInView } from \"framer-motion\";\n\nconst InViewComponent = (props) => {\n  const { children, delay, className } = props;\n\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true });\n\n  return (\n    <div\n      ref={ref}\n      className={`${css({\n        transform: isInView ? \"translateY(0px)\" : \"translateY(20px)\",\n        opacity: isInView ? 1 : 0,\n        transition: `all 0.1s linear ${delay}`,\n      })} ${className}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nInViewComponent.defaultProps = {\n  children: <></>,\n  delay: \"0.3s\",\n  className: undefined,\n};\n\nInViewComponent.propTypes = {\n  children: PropTypes.node,\n  delay: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default InViewComponent;\n","import React, { forwardRef } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\n// @emotion/css\nimport { css } from \"@emotion/css\";\n\nconst Section = forwardRef((props, ref) => {\n  const { id, background, children } = props;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={css({\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: \"100px 0\",\n        minHeight: \"100vh\",\n        background,\n        position: \"relative\",\n      })}\n    >\n      {children}\n    </div>\n  );\n});\n\nSection.defaultProps = {\n  id: \"\",\n  children: <></>,\n  background: \"\",\n};\n\nSection.propTypes = {\n  id: PropTypes.string,\n  children: PropTypes.node,\n  background: PropTypes.string,\n};\n\nexport default Section;\n","const {\n  REACT_APP_EMAILJS_SERVICE_ID,\n  REACT_APP_EMAILJS_TEMPLATE_ID,\n  REACT_APP_EMAILJS_PUBLIC_KEY,\n  REACT_APP_GA,\n} = process.env;\n\nconst config = {\n  serviceId: REACT_APP_EMAILJS_SERVICE_ID,\n  templateId: REACT_APP_EMAILJS_TEMPLATE_ID,\n  publicKey: REACT_APP_EMAILJS_PUBLIC_KEY,\n  ga: REACT_APP_GA,\n};\n\nexport default config;\n","import React, { useRef } from \"react\";\nimport emailjs from \"@emailjs/browser\";\n\n// @emotion/css\nimport { css } from \"@emotion/css\";\n\n// @nextui-org\nimport {\n  Input,\n  Textarea,\n  Button,\n  Text,\n  Image,\n  Container,\n} from \"@nextui-org/react\";\n\n// own components\nimport InViewComponent from \"../../components/InViewComponent/InViewComponent\";\nimport Section from \"../../components/Section/Section\";\n\n// contexts\nimport { useLanguage } from \"../../contexts/LanguageProvider\";\n\n// utils\nimport { parseDelay } from \"../../utils/functions\";\n\n// images\nimport contact from \"../../assets/images/contact.jpg\";\n\n// config\nimport config from \"../../config\";\n\nconst Hero = () => {\n  const form = useRef();\n  const { languageState } = useLanguage();\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    emailjs\n      .sendForm(\n        config.serviceId,\n        config.templateId,\n        form.current,\n        config.publicKey\n      )\n      .then(\n        (result) => {\n          console.log(result.text);\n        },\n        (error) => {\n          console.log(error.text);\n        }\n      );\n  };\n\n  return (\n    <Section id=\"contact\" background=\"#222\">\n      <Container\n        justify=\"center\"\n        alignItems=\"center\"\n        display=\"flex\"\n        direction=\"column\"\n        css={{\n          height: \"100%\",\n        }}\n      >\n        <InViewComponent>\n          <Text h2>{languageState.texts.Contact.Title}</Text>\n        </InViewComponent>\n        <form ref={form} onSubmit={onSubmit}>\n          <div\n            className={css({\n              display: \"grid\",\n              width: \"100%\",\n              gap: \"20px\",\n              marginTop: \"40px\",\n              gridTemplateColumns: \"1fr 1fr\",\n              \"@media (max-width: 549px)\": {\n                gridTemplateColumns: \"1fr\",\n              },\n            })}\n          >\n            <InViewComponent delay=\"0.5s\">\n              <Image\n                src={contact}\n                alt=\"contact\"\n                css={{\n                  width: \"100%\",\n                  height: \"385px\",\n                  objectFit: \"cover\",\n                  background: \"white\",\n                  marginRight: \"100px\",\n                  borderRadius: \"1rem\",\n                }}\n              />\n            </InViewComponent>\n            <div\n              className={css({\n                display: \"flex\",\n                width: \"100%\",\n                flexDirection: \"column\",\n                flexWrap: \"wrap\",\n              })}\n            >\n              {Object.values(languageState.texts.Contact.Inputs).map(\n                (item, i) => (\n                  <InViewComponent\n                    key={item.Label}\n                    delay={`${parseDelay(i, 0.6)}s`}\n                  >\n                    {item.Type !== \"textarea\" && (\n                      <Input\n                        required\n                        name={item.Name}\n                        label={item.Label}\n                        placeholder={item.Placeholder}\n                        css={{ width: \"100%\", marginBottom: \"20px\" }}\n                      />\n                    )}\n                    {item.Type === \"textarea\" && (\n                      <Textarea\n                        rows={5}\n                        required\n                        name={item.Name}\n                        label={item.Label}\n                        placeholder={item.Placeholder}\n                        css={{ width: \"100%\", marginBottom: \"20px\" }}\n                      />\n                    )}\n                  </InViewComponent>\n                )\n              )}\n              <InViewComponent delay=\"0.9s\">\n                <div\n                  sx={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  <Button rounded flat type=\"submit\">\n                    {languageState.texts.Contact.Button}\n                  </Button>\n                </div>\n              </InViewComponent>\n            </div>\n          </div>\n        </form>\n      </Container>\n    </Section>\n  );\n};\n\nexport default Hero;\n","// @ts-check\n\n/**\n * Scroll to a target position, default the top of the page.\n * @param {number} [target=0] - The target position to scroll to. If a string is passed it looks for respective element with target id\n */\nexport const scrollTo = (target = 0) => {\n  let localTarget = 0;\n  if (typeof target === \"string\") {\n    const element = document.getElementById(target);\n    if (element !== null) localTarget = element.offsetTop - 100;\n  }\n  window.scroll({\n    top: localTarget > 100 ? localTarget : target,\n    left: 0,\n    behavior: \"smooth\",\n  });\n};\n\n/**\n *\n * @param {number} i\n * @param {number} delay\n * @returns\n */\nexport const parseDelay = (i, delay) => {\n  let newDelay = delay;\n  for (let j = 0; j < i; j += 1) newDelay += 0.1;\n  return newDelay;\n};\n"],"names":["InViewComponent","props","children","delay","className","ref","useRef","isInView","useInView","once","css","transform","opacity","transition","defaultProps","undefined","Section","forwardRef","id","background","display","justifyContent","alignItems","padding","minHeight","position","process","serviceId","REACT_APP_EMAILJS_SERVICE_ID","templateId","REACT_APP_EMAILJS_TEMPLATE_ID","publicKey","REACT_APP_EMAILJS_PUBLIC_KEY","ga","REACT_APP_GA","form","languageState","useLanguage","justify","direction","height","h2","texts","Contact","Title","onSubmit","e","preventDefault","emailjs","config","current","then","result","console","log","text","error","width","gap","marginTop","gridTemplateColumns","src","contact","alt","objectFit","marginRight","borderRadius","flexDirection","flexWrap","Object","values","Inputs","map","item","i","parseDelay","Type","required","name","Name","label","Label","placeholder","Placeholder","marginBottom","rows","sx","rounded","flat","type","Button","scrollTo","target","localTarget","element","document","getElementById","offsetTop","window","scroll","top","left","behavior","newDelay","j"],"sourceRoot":""}