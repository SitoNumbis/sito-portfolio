{"version":3,"file":"static/js/1910.200344e5.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/send/send.js","layouts/Contact/Contact.jsx"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, publicKey) => {\n    const uID = publicKey || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.7.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import React, { useCallback, useRef, useState, Suspense, memo } from \"react\";\r\nimport emailjs from \"@emailjs/browser\";\r\nimport loadable from \"@loadable/component\";\r\n\r\n// @emotion/css\r\nimport { css } from \"@emotion/css\";\r\n\r\n// contexts\r\nimport { useLanguage } from \"../../contexts/LanguageProvider\";\r\n\r\n// config\r\nimport config from \"../../config\";\r\n\r\n// own components\r\nconst Loading = loadable(() => import(\"../../components/NextUI/Loading\"));\r\nconst InViewComponent = loadable(() =>\r\n  import(\"../../components/InViewComponent/InViewComponent\")\r\n);\r\nconst Section = loadable(() => import(\"../../components/Section/Section\"));\r\n\r\n// NextUI\r\n// local memo\r\nconst Button = loadable(() => import(\"../../components/NextUI/Button\"));\r\nconst Text = loadable(() => import(\"../../components/NextUI/Text\"));\r\nconst Container = loadable(() => import(\"../../components/NextUI/Container\"));\r\nconst Image = loadable(() => import(\"../../components/NextUI/Image\"));\r\nconst Input = loadable(() => import(\"../../components/NextUI/Input\"));\r\nconst Textarea = loadable(() => import(\"../../components/NextUI/Textarea\"));\r\n\r\nconst Contact = () => {\r\n  const form = useRef();\r\n  const { languageState } = useLanguage();\r\n\r\n  const [ok, setOk] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      setLoading(true);\r\n      e.preventDefault();\r\n      emailjs\r\n        .send(\r\n          config.serviceId,\r\n          config.templateId,\r\n          { name, email, message: content },\r\n          config.publicKey\r\n        )\r\n        .then(\r\n          (result) => {\r\n            setName(\"\");\r\n            setEmail(\"\");\r\n            setContent(\"\");\r\n            setOk(1);\r\n            console.info(result.text);\r\n            setLoading(false);\r\n          },\r\n          (error) => {\r\n            setOk(-1);\r\n            console.error(error.text);\r\n          }\r\n        );\r\n    },\r\n    [name, email, content]\r\n  );\r\n\r\n  return (\r\n    <Suspense>\r\n      <Section id=\"contact\" background=\"#222\">\r\n        <Container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          display=\"flex\"\r\n          direction=\"column\"\r\n          css={{\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <InViewComponent>\r\n            <Text h2>{languageState.texts.Contact.Title}</Text>\r\n          </InViewComponent>\r\n          <form id=\"formId\" ref={form} onSubmit={onSubmit}>\r\n            <div\r\n              className={css({\r\n                display: \"grid\",\r\n                width: \"100%\",\r\n                gap: \"20px\",\r\n                marginTop: \"40px\",\r\n                gridTemplateColumns: \"1fr 1fr\",\r\n                \"@media (max-width: 549px)\": {\r\n                  gridTemplateColumns: \"1fr\",\r\n                },\r\n              })}\r\n            >\r\n              <InViewComponent delay=\"0.5s\">\r\n                <Image\r\n                  src=\"https://ik.imagekit.io/lgqp0wffgtp/tr:q-80/SitoPortafolio/contact_CcvqxZuUs.jpg?updatedAt=1682181967086\"\r\n                  alt=\"contact\"\r\n                  css={{\r\n                    width: \"100%\",\r\n                    height: \"385px\",\r\n                    objectFit: \"cover\",\r\n                    background: \"white\",\r\n                    marginRight: \"100px\",\r\n                    borderRadius: \"1rem\",\r\n                  }}\r\n                />\r\n              </InViewComponent>\r\n              <div\r\n                className={css({\r\n                  display: \"flex\",\r\n                  width: \"100%\",\r\n                  flexDirection: \"column\",\r\n                  flexWrap: \"wrap\",\r\n                })}\r\n              >\r\n                <InViewComponent delay={`0.6s`}>\r\n                  <Input\r\n                    required\r\n                    name={languageState.texts.Contact.Inputs.Name.Name}\r\n                    label={languageState.texts.Contact.Inputs.Name.Label}\r\n                    placeholder={\r\n                      languageState.texts.Contact.Inputs.Name.Placeholder\r\n                    }\r\n                    css={{ width: \"100%\", marginBottom: \"20px\" }}\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                  />\r\n                </InViewComponent>\r\n                <InViewComponent delay={`0.7s`}>\r\n                  <Input\r\n                    required\r\n                    name={languageState.texts.Contact.Inputs.Email.Name}\r\n                    label={languageState.texts.Contact.Inputs.Email.Label}\r\n                    placeholder={\r\n                      languageState.texts.Contact.Inputs.Email.Placeholder\r\n                    }\r\n                    css={{ width: \"100%\", marginBottom: \"20px\" }}\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </InViewComponent>\r\n                <InViewComponent delay={`0.8s`}>\r\n                  <Textarea\r\n                    rows={5}\r\n                    required\r\n                    name={languageState.texts.Contact.Inputs.Message.Name}\r\n                    label={languageState.texts.Contact.Inputs.Message.Label}\r\n                    placeholder={\r\n                      languageState.texts.Contact.Inputs.Message.Placeholder\r\n                    }\r\n                    css={{ width: \"100%\", marginBottom: \"20px\" }}\r\n                    value={content}\r\n                    onChange={(e) => setContent(e.target.value)}\r\n                  />\r\n                </InViewComponent>\r\n                {!ok ? (\r\n                  <InViewComponent delay=\"0.9s\">\r\n                    <div\r\n                      sx={{\r\n                        width: \"100%\",\r\n                        display: \"flex\",\r\n                        justifyContent: \"flex-end\",\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        disabled={loading}\r\n                        id=\"send\"\r\n                        aria-label={languageState.texts.AriaLabels.send}\r\n                        rounded\r\n                        flat\r\n                        type=\"submit\"\r\n                      >\r\n                        {loading ? (\r\n                          <Loading />\r\n                        ) : (\r\n                          languageState.texts.Contact.Button\r\n                        )}\r\n                      </Button>\r\n                    </div>\r\n                  </InViewComponent>\r\n                ) : (\r\n                  <Text\r\n                    css={{\r\n                      background: ok === 1 ? \"#009900\" : \"#990000\",\r\n                      padding: \"5px 20px\",\r\n                      borderRadius: \"30px\",\r\n                    }}\r\n                  >\r\n                    {ok === 1\r\n                      ? languageState.texts.Contact.SendOk\r\n                      : languageState.texts.Contact.SendError}\r\n                  </Text>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Container>\r\n      </Section>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nconst ContactMemo = memo((props) => <Contact {...props} />);\r\n\r\nexport default ContactMemo;\r\n"],"names":["store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","httpResponse","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","Loading","loadable","InViewComponent","Section","Button","Text","Container","Image","Input","Textarea","Contact","form","useRef","languageState","useLanguage","useState","ok","setOk","name","setName","email","setEmail","content","setContent","loading","setLoading","onSubmit","useCallback","e","preventDefault","emailjs","config","message","then","result","console","info","error","Suspense","id","background","justify","alignItems","display","direction","css","height","h2","texts","Title","ref","className","width","gap","marginTop","gridTemplateColumns","delay","src","alt","objectFit","marginRight","borderRadius","flexDirection","flexWrap","required","Inputs","Name","label","Label","placeholder","Placeholder","marginBottom","value","onChange","Email","rows","Message","padding","SendOk","SendError","sx","justifyContent","disabled","AriaLabels","rounded","flat","type","memo","props"],"sourceRoot":""}