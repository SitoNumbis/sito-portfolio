{"version":3,"file":"static/js/796.06d90a18.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","config.js","layouts/Contact/Contact.jsx"],"sourcesContent":["import { forwardRef } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\n// @emotion/css\nimport { css } from \"@emotion/css\";\n\nconst Section = forwardRef((props, ref) => {\n  const { id, background, children } = props;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={css({\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: \"100px 0\",\n        minHeight: \"100vh\",\n        background,\n        position: \"relative\",\n      })}\n    >\n      {children}\n    </div>\n  );\n});\n\nSection.defaultProps = {\n  id: \"\",\n  children: <></>,\n  background: \"\",\n};\n\nSection.propTypes = {\n  id: PropTypes.string,\n  children: PropTypes.node,\n  background: PropTypes.string,\n};\n\nexport default Section;\n","const {\n  REACT_APP_EMAILJS_SERVICE_ID,\n  REACT_APP_EMAILJS_TEMPLATE_ID,\n  REACT_APP_EMAILJS_PUBLIC_KEY,\n} = process.env;\n\nconst config = {\n  serviceId: REACT_APP_EMAILJS_SERVICE_ID,\n  templateId: REACT_APP_EMAILJS_TEMPLATE_ID,\n  publicKey: REACT_APP_EMAILJS_PUBLIC_KEY,\n};\n\nexport default config;\n","import React, { useRef } from \"react\";\nimport emailjs from \"@emailjs/browser\";\n\n// @emotion/css\nimport { css } from \"@emotion/css\";\n\n// @nextui-org\nimport {\n  Input,\n  Textarea,\n  Button,\n  Text,\n  Image,\n  Container,\n} from \"@nextui-org/react\";\n\n// own components\nimport InViewComponent from \"../../components/InViewComponent/InViewComponent\";\nimport Section from \"../../components/Section/Section\";\n\n// contexts\nimport { useLanguage } from \"../../contexts/LanguageProvider\";\n\n// utils\nimport { parseDelay } from \"../../utils/functions\";\n\n// images\nimport contact from \"../../assets/images/contact.jpg\";\n\n// config\nimport config from \"../../config\";\n\nconst Hero = () => {\n  const form = useRef();\n  const { languageState } = useLanguage();\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    emailjs\n      .sendForm(\n        config.serviceId,\n        config.templateId,\n        form.current,\n        config.publicKey\n      )\n      .then(\n        (result) => {\n          console.log(result.text);\n        },\n        (error) => {\n          console.log(error.text);\n        }\n      );\n  };\n\n  return (\n    <Section id=\"contact\" background=\"#222\">\n      <Container\n        justify=\"center\"\n        alignItems=\"center\"\n        display=\"flex\"\n        direction=\"column\"\n        css={{\n          height: \"100%\",\n        }}\n      >\n        <InViewComponent>\n          <Text h2>{languageState.texts.Contact.Title}</Text>\n        </InViewComponent>\n        <form ref={form} onSubmit={onSubmit}>\n          <div\n            className={css({\n              display: \"grid\",\n              width: \"100%\",\n              gap: \"20px\",\n              marginTop: \"40px\",\n              gridTemplateColumns: \"1fr 1fr\",\n              \"@media (max-width: 549px)\": {\n                gridTemplateColumns: \"1fr\",\n              },\n            })}\n          >\n            <InViewComponent delay=\"0.5s\">\n              <Image\n                src={contact}\n                alt=\"contact\"\n                css={{\n                  width: \"100%\",\n                  height: \"385px\",\n                  objectFit: \"cover\",\n                  background: \"white\",\n                  marginRight: \"100px\",\n                  borderRadius: \"1rem\",\n                }}\n              />\n            </InViewComponent>\n            <div\n              className={css({\n                display: \"flex\",\n                width: \"100%\",\n                flexDirection: \"column\",\n                flexWrap: \"wrap\",\n              })}\n            >\n              {Object.values(languageState.texts.Contact.Inputs).map(\n                (item, i) => (\n                  <InViewComponent\n                    key={item.Label}\n                    delay={`${parseDelay(i, 0.6)}s`}\n                  >\n                    {item.Type !== \"textarea\" && (\n                      <Input\n                        required\n                        name={item.Name}\n                        label={item.Label}\n                        placeholder={item.Placeholder}\n                        css={{ width: \"100%\", marginBottom: \"20px\" }}\n                      />\n                    )}\n                    {item.Type === \"textarea\" && (\n                      <Textarea\n                        rows={5}\n                        required\n                        name={item.Name}\n                        label={item.Label}\n                        placeholder={item.Placeholder}\n                        css={{ width: \"100%\", marginBottom: \"20px\" }}\n                      />\n                    )}\n                  </InViewComponent>\n                )\n              )}\n              <InViewComponent delay=\"0.9s\">\n                <div\n                  sx={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  <Button rounded flat type=\"submit\">\n                    {languageState.texts.Contact.Button}\n                  </Button>\n                </div>\n              </InViewComponent>\n            </div>\n          </div>\n        </form>\n      </Container>\n    </Section>\n  );\n};\n\nexport default Hero;\n"],"names":["Section","forwardRef","props","ref","id","background","children","className","css","display","justifyContent","alignItems","padding","minHeight","position","defaultProps","process","serviceId","REACT_APP_EMAILJS_SERVICE_ID","templateId","REACT_APP_EMAILJS_TEMPLATE_ID","publicKey","REACT_APP_EMAILJS_PUBLIC_KEY","form","useRef","languageState","useLanguage","justify","direction","height","InViewComponent","h2","texts","Contact","Title","onSubmit","e","preventDefault","emailjs","config","current","then","result","console","log","text","error","width","gap","marginTop","gridTemplateColumns","delay","src","contact","alt","objectFit","marginRight","borderRadius","flexDirection","flexWrap","Object","values","Inputs","map","item","i","parseDelay","Type","required","name","Name","label","Label","placeholder","Placeholder","marginBottom","rows","sx","rounded","flat","type","Button"],"sourceRoot":""}